// Email Service Integration
import { Resend } from "resend"

export interface EmailTemplate {
  id: string
  name: string
  subject: string
  html: string
  text: string
}

export interface ChatSummaryData {
  chatTitle: string
  messageCount: number
  totalTokens: number
  totalCost: number
  keyTopics: string[]
  codeBlocks: number
  startTime: Date
  endTime: Date
}

export class EmailService {
  private resend: Resend

  constructor(apiKey: string) {
    this.resend = new Resend(apiKey)
  }

  async sendChatSummary(to: string, chatData: ChatSummaryData): Promise<void> {
    const subject = `Chat Summary: ${chatData.chatTitle}`
    const html = this.generateChatSummaryHTML(chatData)
    const text = this.generateChatSummaryText(chatData)

    try {
      await this.resend.emails.send({
        from: "Enhanced AI Chat <noreply@enhancedai.chat>",
        to,
        subject,
        html,
        text,
      })
    } catch (error) {
      console.error("Failed to send chat summary:", error)
      throw error
    }
  }

  async shareChat(to: string, chatId: string, shareUrl: string, title: string): Promise<void> {
    const subject = `Shared Chat: ${title}`
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2>Someone shared a chat with you</h2>
        <p>You've been invited to view a chat conversation:</p>
        <h3>${title}</h3>
        <p>
          <a href="${shareUrl}" style="background: #8b5cf6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
            View Chat
          </a>
        </p>
        <p style="color: #666; font-size: 14px;">
          This link will expire in 7 days for security purposes.
        </p>
      </div>
    `

    try {
      await this.resend.emails.send({
        from: "Enhanced AI Chat <noreply@enhancedai.chat>",
        to,
        subject,
        html,
      })
    } catch (error) {
      console.error("Failed to send chat share:", error)
      throw error
    }
  }

  async sendWeeklyReport(to: string, reportData: WeeklyReportData): Promise<void> {
    const subject = "Your Weekly AI Chat Report"
    const html = this.generateWeeklyReportHTML(reportData)

    try {
      await this.resend.emails.send({
        from: "Enhanced AI Chat <reports@enhancedai.chat>",
        to,
        subject,
        html,
      })
    } catch (error) {
      console.error("Failed to send weekly report:", error)
      throw error
    }
  }

  private generateChatSummaryHTML(data: ChatSummaryData): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h1 style="color: #1f2937; border-bottom: 2px solid #8b5cf6; padding-bottom: 10px;">
          Chat Summary: ${data.chatTitle}
        </h1>
        
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h2 style="color: #374151; margin-top: 0;">Session Overview</h2>
          <ul style="color: #6b7280; line-height: 1.6;">
            <li><strong>Duration:</strong> ${this.formatDuration(data.startTime, data.endTime)}</li>
            <li><strong>Messages:</strong> ${data.messageCount}</li>
            <li><strong>Tokens Used:</strong> ${data.totalTokens.toLocaleString()}</li>
            <li><strong>Total Cost:</strong> $${data.totalCost.toFixed(4)}</li>
            <li><strong>Code Blocks:</strong> ${data.codeBlocks}</li>
          </ul>
        </div>

        ${
          data.keyTopics.length > 0
            ? `
        <div style="margin: 20px 0;">
          <h2 style="color: #374151;">Key Topics Discussed</h2>
          <div style="display: flex; flex-wrap: wrap; gap: 8px;">
            ${data.keyTopics
              .map(
                (topic) => `
              <span style="background: #8b5cf6; color: white; padding: 4px 12px; border-radius: 16px; font-size: 14px;">
                ${topic}
              </span>
            `,
              )
              .join("")}
          </div>
        </div>
        `
            : ""
        }

        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 14px;">
          <p>This summary was generated by Enhanced AI Chat. Visit your dashboard to view the full conversation.</p>
        </div>
      </div>
    `
  }

  private generateChatSummaryText(data: ChatSummaryData): string {
    return `
Chat Summary: ${data.chatTitle}

Session Overview:
- Duration: ${this.formatDuration(data.startTime, data.endTime)}
- Messages: ${data.messageCount}
- Tokens Used: ${data.totalTokens.toLocaleString()}
- Total Cost: $${data.totalCost.toFixed(4)}
- Code Blocks: ${data.codeBlocks}

${data.keyTopics.length > 0 ? `Key Topics: ${data.keyTopics.join(", ")}` : ""}

This summary was generated by Enhanced AI Chat.
    `.trim()
  }

  private generateWeeklyReportHTML(data: WeeklyReportData): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h1 style="color: #1f2937;">Your Weekly AI Chat Report</h1>
        
        <div style="background: linear-gradient(135deg, #8b5cf6, #3b82f6); color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h2 style="margin-top: 0;">This Week's Highlights</h2>
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px;">
            <div>
              <div style="font-size: 24px; font-weight: bold;">${data.totalChats}</div>
              <div>Conversations</div>
            </div>
            <div>
              <div style="font-size: 24px; font-weight: bold;">${data.totalMessages}</div>
              <div>Messages</div>
            </div>
            <div>
              <div style="font-size: 24px; font-weight: bold;">${data.totalTokens.toLocaleString()}</div>
              <div>Tokens</div>
            </div>
            <div>
              <div style="font-size: 24px; font-weight: bold;">$${data.totalCost.toFixed(2)}</div>
              <div>Total Cost</div>
            </div>
          </div>
        </div>

        <div style="margin: 20px 0;">
          <h3>Most Used Models</h3>
          ${data.topModels
            .map(
              (model, index) => `
            <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
              <span>${index + 1}. ${model.name}</span>
              <span>${model.usage} uses</span>
            </div>
          `,
            )
            .join("")}
        </div>

        <div style="margin: 20px 0;">
          <h3>Popular Topics</h3>
          <div style="display: flex; flex-wrap: wrap; gap: 8px;">
            ${data.topTopics
              .map(
                (topic) => `
              <span style="background: #f3f4f6; color: #374151; padding: 4px 12px; border-radius: 16px; font-size: 14px;">
                ${topic}
              </span>
            `,
              )
              .join("")}
          </div>
        </div>
      </div>
    `
  }

  private formatDuration(start: Date, end: Date): string {
    const diff = end.getTime() - start.getTime()
    const minutes = Math.floor(diff / 60000)
    const hours = Math.floor(minutes / 60)

    if (hours > 0) {
      return `${hours}h ${minutes % 60}m`
    }
    return `${minutes}m`
  }
}

export interface WeeklyReportData {
  totalChats: number
  totalMessages: number
  totalTokens: number
  totalCost: number
  topModels: Array<{ name: string; usage: number }>
  topTopics: string[]
}

// Global email service
export const emailService = new EmailService(process.env.RESEND_API_KEY || "")
